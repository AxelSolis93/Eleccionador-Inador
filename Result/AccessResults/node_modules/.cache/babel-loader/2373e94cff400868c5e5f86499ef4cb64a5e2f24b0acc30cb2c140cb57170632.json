{"ast":null,"code":"var _jsxFileName = \"D:\\\\Documentos\\\\Code\\\\Node\\\\elecciones\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\n\n// Función auxiliar para obtener los resultados reales desde algún lugar\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nasync function obtenerResultadosReales() {\n  try {\n    // Aquí, realizarías una llamada a una API o accederías a una base de datos para obtener los resultados\n    // Por ejemplo:\n    // const response = await fetch('https://api.example.com/resultados');\n    // const data = await response.json();\n    // return data;\n    // Por ahora, vamos a simular los resultados como un objeto:\n    return {\n      candidatos: ['Candidato A', 'Candidato B', 'Candidato C'],\n      votos: [120, 150, 90]\n    };\n  } catch (error) {\n    console.error('Error al obtener los resultados:', error);\n    return null;\n  }\n}\nconst Resultados = () => {\n  _s();\n  const [resultados, setResultados] = useState(null);\n  useEffect(() => {\n    // Aquí, llamamos a la función auxiliar para obtener los resultados reales\n    obtenerResultadosReales().then(data => setResultados(data)).catch(error => setResultados(null));\n  }, []);\n\n  // Función auxiliar para generar la representación gráfica de los resultados\n  const generarGraficoResultados = () => {\n    if (!resultados) {\n      return /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Obteniendo resultados...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 14\n      }, this);\n    }\n\n    // Aquí, usarías la librería de gráficos que desees para representar los resultados\n    // Por ejemplo, puedes usar Chart.js o Recharts para esto\n    // A continuación, te muestro un ejemplo simple usando HTML y CSS:\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"grafico-resultados\",\n      children: resultados.candidatos.map((candidato, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"barra\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"nombre-candidato\",\n          children: candidato\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 45,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"votos\",\n          children: resultados.votos[index]\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 46,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"barra-votos\",\n          style: {\n            width: `${resultados.votos[index] / Math.max(...resultados.votos) * 100}%`\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 47,\n          columnNumber: 13\n        }, this)]\n      }, candidato, true, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 7\n    }, this);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Resultados de la elecci\\xF3n\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 7\n    }, this), generarGraficoResultados()]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 58,\n    columnNumber: 5\n  }, this);\n};\n_s(Resultados, \"ZvFzyPGRo2o5vR7Dat3vCwrzuMg=\");\n_c = Resultados;\nexport default Resultados;\nvar _c;\n$RefreshReg$(_c, \"Resultados\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","obtenerResultadosReales","candidatos","votos","error","console","Resultados","_s","resultados","setResultados","then","data","catch","generarGraficoResultados","children","fileName","_jsxFileName","lineNumber","columnNumber","className","map","candidato","index","style","width","Math","max","_c","$RefreshReg$"],"sources":["D:/Documentos/Code/Node/elecciones/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\n\n// Función auxiliar para obtener los resultados reales desde algún lugar\nasync function obtenerResultadosReales() {\n  try {\n    // Aquí, realizarías una llamada a una API o accederías a una base de datos para obtener los resultados\n    // Por ejemplo:\n    // const response = await fetch('https://api.example.com/resultados');\n    // const data = await response.json();\n    // return data;\n    // Por ahora, vamos a simular los resultados como un objeto:\n    return {\n      candidatos: ['Candidato A', 'Candidato B', 'Candidato C'],\n      votos: [120, 150, 90],\n    };\n  } catch (error) {\n    console.error('Error al obtener los resultados:', error);\n    return null;\n  }\n}\n\nconst Resultados = () => {\n  const [resultados, setResultados] = useState(null);\n\n  useEffect(() => {\n    // Aquí, llamamos a la función auxiliar para obtener los resultados reales\n    obtenerResultadosReales()\n      .then((data) => setResultados(data))\n      .catch((error) => setResultados(null));\n  }, []);\n\n  // Función auxiliar para generar la representación gráfica de los resultados\n  const generarGraficoResultados = () => {\n    if (!resultados) {\n      return <p>Obteniendo resultados...</p>;\n    }\n\n    // Aquí, usarías la librería de gráficos que desees para representar los resultados\n    // Por ejemplo, puedes usar Chart.js o Recharts para esto\n    // A continuación, te muestro un ejemplo simple usando HTML y CSS:\n    return (\n      <div className=\"grafico-resultados\">\n        {resultados.candidatos.map((candidato, index) => (\n          <div key={candidato} className=\"barra\">\n            <div className=\"nombre-candidato\">{candidato}</div>\n            <div className=\"votos\">{resultados.votos[index]}</div>\n            <div\n              className=\"barra-votos\"\n              style={{ width: `${(resultados.votos[index] / Math.max(...resultados.votos)) * 100}%` }}\n            />\n          </div>\n        ))}\n      </div>\n    );\n  };\n\n  return (\n    <div>\n      <h1>Resultados de la elección</h1>\n      {generarGraficoResultados()}\n    </div>\n  );\n};\n\nexport default Resultados;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}
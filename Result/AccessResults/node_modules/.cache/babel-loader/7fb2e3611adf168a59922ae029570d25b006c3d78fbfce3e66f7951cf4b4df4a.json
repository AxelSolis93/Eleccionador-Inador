{"ast":null,"code":"var _jsxFileName = \"D:\\\\Documentos\\\\Code\\\\Node\\\\elecciones\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport Chart from 'chart.js/auto';\n\n// Función auxiliar para obtener los resultados reales desde algún lugar (ahora simularemos los datos)\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nasync function obtenerResultadosReales() {\n  return new Promise(resolve => {\n    // Simulación de los datos (reemplaza esto con tus resultados reales)\n    const resultadosSimulados = {\n      candidatos: ['Candidato A', 'Candidato B', 'Candidato C'],\n      votos: [120, 150, 90]\n    };\n    setTimeout(() => {\n      resolve(resultadosSimulados);\n    }, 1000); // Simulamos una pequeña espera para emular una solicitud asincrónica\n  });\n}\n\nconst Resultados = () => {\n  _s();\n  const [resultados, setResultados] = useState(null);\n  useEffect(() => {\n    obtenerResultadosReales().then(data => setResultados(data)).catch(error => setResultados(null));\n  }, []);\n  useEffect(() => {\n    if (resultados) {\n      // Aquí, llamamos a la función para generar el gráfico\n      generarGraficoResultados();\n    }\n  }, [resultados]);\n  const generarGraficoResultados = () => {\n    const canvasRef = document.getElementById('grafico-resultados');\n\n    // Configuración del gráfico\n    const data = {\n      labels: resultados.candidatos,\n      datasets: [{\n        label: 'Votos recibidos',\n        data: resultados.votos,\n        backgroundColor: ['rgba(75, 192, 192, 0.6)', 'rgba(255, 99, 132, 0.6)', 'rgba(54, 162, 235, 0.6)'],\n        borderColor: ['rgba(75, 192, 192, 1)', 'rgba(255, 99, 132, 1)', 'rgba(54, 162, 235, 1)'],\n        borderWidth: 1\n      }]\n    };\n    const options = {\n      responsive: true,\n      maintainAspectRatio: false,\n      scales: {\n        y: {\n          beginAtZero: true\n        }\n      }\n    };\n\n    // Crear el gráfico con Chart.js\n    new Chart(canvasRef, {\n      type: 'bar',\n      data: data,\n      options: options\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Resultados de la elecci\\xF3n\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 7\n    }, this), resultados ? /*#__PURE__*/_jsxDEV(\"canvas\", {\n      id: \"grafico-resultados\",\n      width: \"400\",\n      height: \"200\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Obteniendo resultados...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 70,\n    columnNumber: 5\n  }, this);\n};\n_s(Resultados, \"E0sO6MM4u8RBA3zPM0kH81SGDhk=\");\n_c = Resultados;\nexport default Resultados;\nvar _c;\n$RefreshReg$(_c, \"Resultados\");","map":{"version":3,"names":["React","useState","useEffect","Chart","jsxDEV","_jsxDEV","obtenerResultadosReales","Promise","resolve","resultadosSimulados","candidatos","votos","setTimeout","Resultados","_s","resultados","setResultados","then","data","catch","error","generarGraficoResultados","canvasRef","document","getElementById","labels","datasets","label","backgroundColor","borderColor","borderWidth","options","responsive","maintainAspectRatio","scales","y","beginAtZero","type","children","fileName","_jsxFileName","lineNumber","columnNumber","id","width","height","_c","$RefreshReg$"],"sources":["D:/Documentos/Code/Node/elecciones/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport Chart from 'chart.js/auto';\n\n// Función auxiliar para obtener los resultados reales desde algún lugar (ahora simularemos los datos)\nasync function obtenerResultadosReales() {\n  return new Promise((resolve) => {\n    // Simulación de los datos (reemplaza esto con tus resultados reales)\n    const resultadosSimulados = {\n      candidatos: ['Candidato A', 'Candidato B', 'Candidato C'],\n      votos: [120, 150, 90],\n    };\n    setTimeout(() => {\n      resolve(resultadosSimulados);\n    }, 1000); // Simulamos una pequeña espera para emular una solicitud asincrónica\n  });\n}\n\nconst Resultados = () => {\n  const [resultados, setResultados] = useState(null);\n\n  useEffect(() => {\n    obtenerResultadosReales()\n      .then((data) => setResultados(data))\n      .catch((error) => setResultados(null));\n  }, []);\n\n  useEffect(() => {\n    if (resultados) {\n      // Aquí, llamamos a la función para generar el gráfico\n      generarGraficoResultados();\n    }\n  }, [resultados]);\n\n  const generarGraficoResultados = () => {\n    const canvasRef = document.getElementById('grafico-resultados');\n\n    // Configuración del gráfico\n    const data = {\n      labels: resultados.candidatos,\n      datasets: [\n        {\n          label: 'Votos recibidos',\n          data: resultados.votos,\n          backgroundColor: ['rgba(75, 192, 192, 0.6)', 'rgba(255, 99, 132, 0.6)', 'rgba(54, 162, 235, 0.6)'],\n          borderColor: ['rgba(75, 192, 192, 1)', 'rgba(255, 99, 132, 1)', 'rgba(54, 162, 235, 1)'],\n          borderWidth: 1,\n        },\n      ],\n    };\n\n    const options = {\n      responsive: true,\n      maintainAspectRatio: false,\n      scales: {\n        y: {\n          beginAtZero: true,\n        },\n      },\n    };\n\n    // Crear el gráfico con Chart.js\n    new Chart(canvasRef, {\n      type: 'bar',\n      data: data,\n      options: options,\n    });\n  };\n\n  return (\n    <div>\n      <h1>Resultados de la elección</h1>\n      {resultados ? (\n        <canvas id=\"grafico-resultados\" width=\"400\" height=\"200\" />\n      ) : (\n        <p>Obteniendo resultados...</p>\n      )}\n    </div>\n  );\n};\n\nexport default Resultados;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"var _jsxFileName = \"D:\\\\Documentos\\\\Code\\\\Node\\\\elecciones\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\n\n// Componente para mostrar los resultados de la elección en formato de lista\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction ResultadosLista({\n  resultados\n}) {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"Resultados en formato de lista\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 7,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: resultados.map((resultado, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n        children: [resultado.candidato, \": \", resultado.votos, \" votos\"]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 10,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 8,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 6,\n    columnNumber: 5\n  }, this);\n}\n\n// Componente para mostrar el gráfico de barras de los resultados\n_c = ResultadosLista;\nfunction GraficoBarras({\n  resultados\n}) {\n  // Aquí colocaríamos la implementación para crear el gráfico de barras utilizando estilos CSS\n  // Puedes utilizar divs con estilos para representar cada barra y ajustar su altura proporcionalmente a los votos recibidos por cada candidato.\n  // Por ejemplo, podrías utilizar flexbox o grid para alinear las barras y añadir un elemento adicional para mostrar la etiqueta del candidato y los votos.\n  // Dependiendo del diseño deseado, podrías añadir animaciones o transiciones para una experiencia más fluida.\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"Resultados en gr\\xE1fico de barras (Por implementar)\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 27,\n    columnNumber: 5\n  }, this);\n}\n\n// Componente principal que representa el flujo descrito\n_c2 = GraficoBarras;\nfunction FlujoResultadosElecciones() {\n  _s();\n  const [resultados, setResultados] = useState([]);\n  useEffect(() => {\n    // En este useEffect se realizaría la llamada a una función (a implementar) para obtener los resultados desde una fuente externa.\n    // Por ejemplo, podrías utilizar fetch() para hacer una solicitud HTTP a una API que devuelve los resultados reales.\n    // Luego, actualizarías el estado con los resultados obtenidos utilizando setResultados(resultadosObtenidos);\n  }, []); // El segundo argumento del useEffect, [] en este caso, asegura que la solicitud se haga solo una vez al montar el componente.\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: resultados.length > 0 ? /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(ResultadosLista, {\n        resultados: resultados\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(GraficoBarras, {\n        resultados: resultados\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Cargando resultados...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 45,\n    columnNumber: 5\n  }, this);\n}\n_s(FlujoResultadosElecciones, \"ZdhqzS8/OQu0mLyrS9nQW4QGhwE=\");\n_c3 = FlujoResultadosElecciones;\nexport default FlujoResultadosElecciones;\nvar _c, _c2, _c3;\n$RefreshReg$(_c, \"ResultadosLista\");\n$RefreshReg$(_c2, \"GraficoBarras\");\n$RefreshReg$(_c3, \"FlujoResultadosElecciones\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","ResultadosLista","resultados","children","fileName","_jsxFileName","lineNumber","columnNumber","map","resultado","index","candidato","votos","_c","GraficoBarras","_c2","FlujoResultadosElecciones","_s","setResultados","length","_c3","$RefreshReg$"],"sources":["D:/Documentos/Code/Node/elecciones/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\n\n// Componente para mostrar los resultados de la elección en formato de lista\nfunction ResultadosLista({ resultados }) {\n  return (\n    <div>\n      <h3>Resultados en formato de lista</h3>\n      <ul>\n        {resultados.map((resultado, index) => (\n          <li key={index}>\n            {resultado.candidato}: {resultado.votos} votos\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n}\n\n// Componente para mostrar el gráfico de barras de los resultados\nfunction GraficoBarras({ resultados }) {\n  // Aquí colocaríamos la implementación para crear el gráfico de barras utilizando estilos CSS\n  // Puedes utilizar divs con estilos para representar cada barra y ajustar su altura proporcionalmente a los votos recibidos por cada candidato.\n  // Por ejemplo, podrías utilizar flexbox o grid para alinear las barras y añadir un elemento adicional para mostrar la etiqueta del candidato y los votos.\n  // Dependiendo del diseño deseado, podrías añadir animaciones o transiciones para una experiencia más fluida.\n\n  return (\n    <div>\n      <h3>Resultados en gráfico de barras (Por implementar)</h3>\n      {/* Aquí iría la implementación del gráfico de barras */}\n    </div>\n  );\n}\n\n// Componente principal que representa el flujo descrito\nfunction FlujoResultadosElecciones() {\n  const [resultados, setResultados] = useState([]);\n\n  useEffect(() => {\n    // En este useEffect se realizaría la llamada a una función (a implementar) para obtener los resultados desde una fuente externa.\n    // Por ejemplo, podrías utilizar fetch() para hacer una solicitud HTTP a una API que devuelve los resultados reales.\n    // Luego, actualizarías el estado con los resultados obtenidos utilizando setResultados(resultadosObtenidos);\n  }, []); // El segundo argumento del useEffect, [] en este caso, asegura que la solicitud se haga solo una vez al montar el componente.\n\n  return (\n    <div>\n      {resultados.length > 0 ? (\n        <div>\n          <ResultadosLista resultados={resultados} />\n          <GraficoBarras resultados={resultados} />\n        </div>\n      ) : (\n        <p>Cargando resultados...</p>\n      )}\n    </div>\n  );\n}\n\nexport default FlujoResultadosElecciones;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;;AAElD;AAAA,SAAAC,MAAA,IAAAC,OAAA;AACA,SAASC,eAAeA,CAAC;EAAEC;AAAW,CAAC,EAAE;EACvC,oBACEF,OAAA;IAAAG,QAAA,gBACEH,OAAA;MAAAG,QAAA,EAAI;IAA8B;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eACvCP,OAAA;MAAAG,QAAA,EACGD,UAAU,CAACM,GAAG,CAAC,CAACC,SAAS,EAAEC,KAAK,kBAC/BV,OAAA;QAAAG,QAAA,GACGM,SAAS,CAACE,SAAS,EAAC,IAAE,EAACF,SAAS,CAACG,KAAK,EAAC,QAC1C;MAAA,GAFSF,KAAK;QAAAN,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAEV,CACL;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACA,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACF,CAAC;AAEV;;AAEA;AAAAM,EAAA,GAfSZ,eAAe;AAgBxB,SAASa,aAAaA,CAAC;EAAEZ;AAAW,CAAC,EAAE;EACrC;EACA;EACA;EACA;;EAEA,oBACEF,OAAA;IAAAG,QAAA,eACEH,OAAA;MAAAG,QAAA,EAAI;IAAiD;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAEvD,CAAC;AAEV;;AAEA;AAAAQ,GAAA,GAdSD,aAAa;AAetB,SAASE,yBAAyBA,CAAA,EAAG;EAAAC,EAAA;EACnC,MAAM,CAACf,UAAU,EAAEgB,aAAa,CAAC,GAAGrB,QAAQ,CAAC,EAAE,CAAC;EAEhDC,SAAS,CAAC,MAAM;IACd;IACA;IACA;EAAA,CACD,EAAE,EAAE,CAAC,CAAC,CAAC;;EAER,oBACEE,OAAA;IAAAG,QAAA,EACGD,UAAU,CAACiB,MAAM,GAAG,CAAC,gBACpBnB,OAAA;MAAAG,QAAA,gBACEH,OAAA,CAACC,eAAe;QAACC,UAAU,EAAEA;MAAW;QAAAE,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC,eAC3CP,OAAA,CAACc,aAAa;QAACZ,UAAU,EAAEA;MAAW;QAAAE,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACtC,CAAC,gBAENP,OAAA;MAAAG,QAAA,EAAG;IAAsB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAG;EAC7B;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACE,CAAC;AAEV;AAACU,EAAA,CArBQD,yBAAyB;AAAAI,GAAA,GAAzBJ,yBAAyB;AAuBlC,eAAeA,yBAAyB;AAAC,IAAAH,EAAA,EAAAE,GAAA,EAAAK,GAAA;AAAAC,YAAA,CAAAR,EAAA;AAAAQ,YAAA,CAAAN,GAAA;AAAAM,YAAA,CAAAD,GAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}
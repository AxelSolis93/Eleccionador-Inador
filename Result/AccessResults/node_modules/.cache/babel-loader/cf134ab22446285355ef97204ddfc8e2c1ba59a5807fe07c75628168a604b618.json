{"ast":null,"code":"var _jsxFileName = \"D:\\\\Documentos\\\\Code\\\\Node\\\\elecciones\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { BarChart, Bar, XAxis, YAxis, CartesianGrid, Tooltip, Legend } from 'recharts';\n\n// Función para obtener los resultados reales desde una fuente externa (simulada)\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction obtenerResultadosDesdeFuenteExterna() {\n  return new Promise(resolve => {\n    // Simulamos una demora de 2 segundos para obtener los resultados\n    setTimeout(() => {\n      const resultadosSimulados = [{\n        candidato: 'Candidato A',\n        votos: 150\n      }, {\n        candidato: 'Candidato B',\n        votos: 200\n      }, {\n        candidato: 'Candidato C',\n        votos: 100\n      }];\n      resolve(resultadosSimulados);\n    }, 2000);\n  });\n}\n\n// Componente para mostrar los resultados de la elección en formato de lista\nfunction ResultadosLista({\n  resultados\n}) {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"Resultados en formato de lista\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: resultados.map((resultado, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n        children: [resultado.candidato, \": \", resultado.votos, \" votos\"]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 26,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 22,\n    columnNumber: 5\n  }, this);\n}\n\n// Componente para mostrar el gráfico de barras de los resultados\n_c = ResultadosLista;\nfunction GraficoBarras({\n  resultados\n}) {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"Resultados en gr\\xE1fico de barras\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(BarChart, {\n      width: 400,\n      height: 300,\n      data: resultados,\n      children: [/*#__PURE__*/_jsxDEV(CartesianGrid, {\n        strokeDasharray: \"3 3\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(XAxis, {\n        dataKey: \"candidato\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(YAxis, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Tooltip, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Legend, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Bar, {\n        dataKey: \"votos\",\n        fill: \"#007bff\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 38,\n    columnNumber: 5\n  }, this);\n}\n\n// Componente principal que representa el flujo descrito\n_c2 = GraficoBarras;\nfunction FlujoResultadosElecciones() {\n  _s();\n  const [resultados, setResultados] = useState([]);\n  useEffect(() => {\n    // Cuando el componente monta, obtenemos los resultados desde la fuente externa\n    obtenerResultadosDesdeFuenteExterna().then(resultadosObtenidos => {\n      // Actualizamos el estado con los resultados obtenidos\n      setResultados(resultadosObtenidos);\n    });\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: resultados.length > 0 ? /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(ResultadosLista, {\n        resultados: resultados\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(GraficoBarras, {\n        resultados: resultados\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Cargando resultados...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 65,\n    columnNumber: 5\n  }, this);\n}\n_s(FlujoResultadosElecciones, \"ZdhqzS8/OQu0mLyrS9nQW4QGhwE=\");\n_c3 = FlujoResultadosElecciones;\nexport default FlujoResultadosElecciones;\nvar _c, _c2, _c3;\n$RefreshReg$(_c, \"ResultadosLista\");\n$RefreshReg$(_c2, \"GraficoBarras\");\n$RefreshReg$(_c3, \"FlujoResultadosElecciones\");","map":{"version":3,"names":["React","useState","useEffect","BarChart","Bar","XAxis","YAxis","CartesianGrid","Tooltip","Legend","jsxDEV","_jsxDEV","obtenerResultadosDesdeFuenteExterna","Promise","resolve","setTimeout","resultadosSimulados","candidato","votos","ResultadosLista","resultados","children","fileName","_jsxFileName","lineNumber","columnNumber","map","resultado","index","_c","GraficoBarras","width","height","data","strokeDasharray","dataKey","fill","_c2","FlujoResultadosElecciones","_s","setResultados","then","resultadosObtenidos","length","_c3","$RefreshReg$"],"sources":["D:/Documentos/Code/Node/elecciones/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { BarChart, Bar, XAxis, YAxis, CartesianGrid, Tooltip, Legend } from 'recharts';\n\n// Función para obtener los resultados reales desde una fuente externa (simulada)\nfunction obtenerResultadosDesdeFuenteExterna() {\n  return new Promise((resolve) => {\n    // Simulamos una demora de 2 segundos para obtener los resultados\n    setTimeout(() => {\n      const resultadosSimulados = [\n        { candidato: 'Candidato A', votos: 150 },\n        { candidato: 'Candidato B', votos: 200 },\n        { candidato: 'Candidato C', votos: 100 },\n      ];\n      resolve(resultadosSimulados);\n    }, 2000);\n  });\n}\n\n// Componente para mostrar los resultados de la elección en formato de lista\nfunction ResultadosLista({ resultados }) {\n  return (\n    <div>\n      <h3>Resultados en formato de lista</h3>\n      <ul>\n        {resultados.map((resultado, index) => (\n          <li key={index}>\n            {resultado.candidato}: {resultado.votos} votos\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n}\n\n// Componente para mostrar el gráfico de barras de los resultados\nfunction GraficoBarras({ resultados }) {\n  return (\n    <div>\n      <h3>Resultados en gráfico de barras</h3>\n      <BarChart width={400} height={300} data={resultados}>\n        <CartesianGrid strokeDasharray=\"3 3\" />\n        <XAxis dataKey=\"candidato\" />\n        <YAxis />\n        <Tooltip />\n        <Legend />\n        <Bar dataKey=\"votos\" fill=\"#007bff\" />\n      </BarChart>\n    </div>\n  );\n}\n\n// Componente principal que representa el flujo descrito\nfunction FlujoResultadosElecciones() {\n  const [resultados, setResultados] = useState([]);\n\n  useEffect(() => {\n    // Cuando el componente monta, obtenemos los resultados desde la fuente externa\n    obtenerResultadosDesdeFuenteExterna().then((resultadosObtenidos) => {\n      // Actualizamos el estado con los resultados obtenidos\n      setResultados(resultadosObtenidos);\n    });\n  }, []);\n\n  return (\n    <div>\n      {resultados.length > 0 ? (\n        <div>\n          <ResultadosLista resultados={resultados} />\n          <GraficoBarras resultados={resultados} />\n        </div>\n      ) : (\n        <p>Cargando resultados...</p>\n      )}\n    </div>\n  );\n}\n\nexport default FlujoResultadosElecciones;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}